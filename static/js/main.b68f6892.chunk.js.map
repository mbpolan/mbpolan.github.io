{"version":3,"sources":["providers/contentful/context.ts","providers/contentful/provider.tsx","providers/cache/context.ts","providers/themeMode/context.ts","providers/themeMode/provider.tsx","hooks/useContent.ts","hooks/useThemeMode.ts","components/BlogPostCard/BlogPostCard.tsx","components/layout/index.tsx","components/displays/Error.tsx","components/displays/Loading.tsx","components/displays/NoData.tsx","components/BlogPostList/BlogPostList.tsx","components/Header/Header.tsx","scenes/Blog/Blog.tsx","scenes/Home/Home.tsx","components/PostView/PrismRenderer.tsx","components/PostView/PostView.tsx","scenes/Post/Post.tsx","hooks/useContentEntry.ts","themes/dark.ts","themes/light.ts","themes/globalStyles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContentfulContext","createContext","ContentfulProvider","children","liveMode","client","useMemo","createClient","space","process","accessToken","host","Provider","value","CacheContext","data","ThemeModeContext","ThemeModeProvider","mode","useContent","query","cache","useContext","context","useState","setData","error","setError","loading","setLoading","useEffect","a","cacheKey","JSON","stringify","cached","getEntries","response","content","items","map","i","fields","console","useThemeMode","StyledCard","styled","Card","BlogPostCard","entry","onClick","Body","Title","title","Subtitle","className","Date","publishedDate","toLocaleDateString","year","month","day","Text","leadText","PageContainer","Container","Stack","div","HeadingText","Error","message","Loading","Spinner","animation","variant","NoData","contentQuery","content_type","select","join","limit","BlogPostList","history","useHistory","push","slug","handlePostClick","ThemeButton","Header","onChangeTheme","themeMode","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Blog","Home","PrismRenderer","inline","props","match","exec","style","darkTheme","lightTheme","language","PreTag","String","replace","Heading","PostView","components","code","remarkPlugins","gfm","Post","useParams","useContentEntry","Breadcrumb","Item","active","dark","body","backgroundColor","textColor","breadcrumb","card","light","GlobalStyles","createGlobalStyle","theme","search","useLocation","setLiveMode","qs","parse","ignoreQueryPrefix","preview","path","component","App","prefersDarkMode","window","matchMedia","matches","setThemeMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b68f6892.chunk.js","sourcesContent":["import { ContentfulClientApi } from 'contentful';\nimport { createContext } from 'react';\n\nexport interface IContentfulContext {\n    client?: ContentfulClientApi;\n}\n\nexport const ContentfulContext = createContext<IContentfulContext>({});\n","import { createClient } from \"contentful\";\nimport {ReactNode, useMemo } from \"react\";\nimport { ContentfulContext } from \".\";\n\nexport interface ContentfulProviderProps {\n    liveMode: boolean;\n    children: ReactNode;\n}\n\nexport const ContentfulProvider = ({\n    children,\n    liveMode,\n}: ContentfulProviderProps) => {\n\n    const client = useMemo(() => {\n        return createClient({\n            space: process.env.REACT_APP_CTF_SPACE_ID || '',\n            accessToken: (liveMode ? process.env.REACT_APP_CTF_CDN_TOKEN : process.env.REACT_APP_CTF_PREVIEW_TOKEN) || '',\n            host: liveMode ? 'cdn.contentful.com' : 'preview.contentful.com',\n        });\n    }, [liveMode]);\n\n    return (\n        <ContentfulContext.Provider value={{\n            client,\n        }}>\n            {children}\n        </ContentfulContext.Provider>\n    )\n};\n","import { createContext } from \"react\";\n\nexport interface ICacheContext {\n    data: Record<string, any>;\n}\n\nexport const CacheContext = createContext<ICacheContext>({\n    data: {},\n});\n","import { createContext } from \"react\";\n\nexport type ThemeMode = 'light' | 'dark';\n\nexport const ThemeModeContext = createContext<ThemeMode>('light');\n","import { ReactNode } from \"react\";\nimport { ThemeMode, ThemeModeContext } from \"./context\";\n\nexport interface ThemeModeProviderProps {\n    children: ReactNode;\n    mode: ThemeMode;\n}\n\nexport const ThemeModeProvider = ({ children, mode }: ThemeModeProviderProps) => {\n    return (\n        <ThemeModeContext.Provider value={mode}>\n            {children}\n        </ThemeModeContext.Provider>\n    )\n}","import { useContext, useEffect, useState } from 'react';\nimport { ContentfulContext, ICacheContext } from '../providers';\nimport { CacheContext } from '../providers';\n\ntype UseContentResult<T> = [T[], string | undefined, boolean];\n\nexport const useContent = <T>(query: any): UseContentResult<T> => {\n  const cache = useContext<ICacheContext>(CacheContext);\n  const context = useContext(ContentfulContext);\n  const [data, setData] = useState<T[]>([]);\n  const [error, setError] = useState<string | undefined>();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n\n      try {\n        const cacheKey = JSON.stringify(query);\n        const cached = cache.data[cacheKey];\n        if (cached) {\n          setData(cached);\n        } else {\n          const response = await context.client?.getEntries<T>(query);\n          const content = response?.items.map((i) => i.fields) || [];\n\n          setData(content);\n          cache.data[cacheKey] = content;\n        }\n      } catch (e) {\n        console.error(e);\n        setError('Failed to fetch data.');\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [query, context.client]);\n\n  return [data, error, loading];\n};\n","import { useContext } from 'react';\nimport { ThemeMode, ThemeModeContext } from '../providers/themeMode';\n\nexport const useThemeMode = (): ThemeMode => {\n  const context = useContext(ThemeModeContext);\n  return context;\n};\n","import { Card } from \"react-bootstrap\"\nimport styled from \"styled-components\"\nimport { BlogPostEntry } from \"../../types\"\n\nconst StyledCard = styled(Card)`\n  margin: 10px 0;\n  width: 100%;\n\n  &:hover {\n      cursor: pointer;\n  }\n`;\n\nexport interface BlogPostCardProps {\n    entry: BlogPostEntry;\n    onClick: () => void;\n};\n\nexport const BlogPostCard = ({\n    entry,\n    onClick,\n}: BlogPostCardProps) => {\n\n    const formatDate = () => {\n        return new Date(entry.publishedDate).toLocaleDateString('en-US',\n        {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        });\n    }\n\n    return (\n        <StyledCard onClick={onClick}>\n            <Card.Body>\n                <Card.Title>{entry.title}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{formatDate()}</Card.Subtitle>\n                <Card.Text>\n                    {entry.leadText}\n                </Card.Text>\n            </Card.Body>\n        </StyledCard>\n    );\n}","import { Container } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nexport const PageContainer = styled(Container)`\n    margin-top: 20px;\n`;\n\nexport const Stack = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;","import styled from \"styled-components\";\nimport { Stack } from \"../layout\";\n\nconst HeadingText = styled.div`\n    font-weight: bold;\n`;\n\nconst Text = styled.div`\n    font-size: 1.2rem;\n`;\n\nexport interface ErrorProps {\n    message: string;\n}\n\nexport const Error = ({ message }: ErrorProps) => {\n    return (\n        <Stack>\n            <HeadingText>Oh snap!</HeadingText>\n            <Text>{message}</Text>\n        </Stack>\n    );\n}","import React from \"react\"\nimport { Spinner } from \"react-bootstrap\"\nimport styled from \"styled-components\";\nimport { Stack } from \"../layout\"\n\nconst Text = styled.div`\n  font-size: 1.2rem;\n`;\n\nexport interface LoadingProps {\n    message: string;\n}\n\nexport const Loading = ({ message }: LoadingProps) => {\n    return (\n        <Stack>\n            <Spinner animation=\"border\" variant=\"primary\" />\n            <Text>{message}</Text>\n        </Stack>\n    );\n}","import styled from \"styled-components\";\nimport { Stack } from \"../layout\";\n\nconst HeadingText = styled.div`\n    font-family: monospace;\n    font-size: 1.1rem;\n    font-weight: bold;\n`;\n\nconst Text = styled.div`\n    font-size: 1.2rem;\n`;\n\nexport interface NoDataProps {\n    message: string;\n}\n\nexport const NoData = ({ message }: NoDataProps) => {\n    return (\n        <Stack>\n            <HeadingText>:(</HeadingText>\n            <Text>{message}</Text>\n        </Stack>\n    );\n}","import { useHistory } from \"react-router\";\nimport { useContent } from \"../../hooks\";\nimport { BlogPostEntry } from \"../../types\";\nimport { BlogPostCard } from '../BlogPostCard';\nimport { PageContainer } from '../layout';\nimport { Error, Loading, NoData} from '../displays';\n\nexport interface BlogPostListProps {\n    limit?: number;\n}\n\nconst contentQuery = {\n    content_type: 'blogPost',\n    select: ['fields.title', 'fields.slug', 'fields.publishedDate', 'fields.leadText'].join(','),\n    limit: 3,\n}\n\nexport const BlogPostList = ({\n    limit\n}: BlogPostListProps) => {\n    const history = useHistory();\n    const [ data, error, loading ] = useContent<BlogPostEntry>(contentQuery);\n\n    const handlePostClick = (entry: BlogPostEntry) => {\n        history.push(`/blog/${entry.slug}`);\n    }\n\n    return (\n        <PageContainer>\n            { error && <Error message={error} />}\n            { loading && <Loading message={'Fetching post content'} />}\n            { !loading && !data && <NoData message={'Could not find blog post'} />}\n            {data.map(entry => <BlogPostCard entry={entry} onClick={() => handlePostClick(entry)}/>)}\n        </PageContainer>\n    )\n}","import { Nav, Navbar } from \"react-bootstrap\";\nimport { MoonStars, Sun } from 'react-bootstrap-icons';\nimport styled from \"styled-components\";\nimport { useThemeMode } from \"../../hooks\";\nimport { ThemeMode } from \"../../providers\";\n\nconst ThemeButton = styled.div`\n    cursor: pointer;\n`;\n\nexport interface HeaderProps {\n    onChangeTheme: (mode: ThemeMode) => void;\n}\n\nexport const Header = ({onChangeTheme}: HeaderProps) => {\n    const themeMode = useThemeMode();\n\n    const handleThemeClick = () => {\n        if (themeMode === 'light') {\n            onChangeTheme('dark');\n        } else {\n            onChangeTheme('light');\n        }\n    }\n\n    return (\n        <Navbar bg={themeMode} variant={themeMode} expand=\"lg\">\n            <Navbar.Brand href=\"#home\">Mike Polan</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <ThemeButton onClick={handleThemeClick} >\n                    {themeMode === 'light' ? <MoonStars /> : <Sun />}\n                </ThemeButton>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#blog\">Blog</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n","import { BlogPostList } from \"../../components\";\nimport { PageContainer } from '../../components/layout';\n\nexport const Blog = () => {\n    return (\n        <PageContainer>\n            <p>Here you will find all of my ramblings and other (sometimes) relevant blog posts.</p>\n            <BlogPostList />\n        </PageContainer>\n    )\n};\n","import { BlogPostList } from \"../../components\";\nimport { PageContainer } from '../../components/layout';\n\nexport const Home = () => {\n    return (\n        <PageContainer>\n            <p>Hey! Looks like you've stumbled into my small corner of the interwebs.</p>\n            <p>I'm your usual hobby-turned-career programmer, who loves learning new things and trying out the latest tech whenever I get the chance. Professionally, I develop and maintain web applications using various languages and frameworks, ranging from Java and Spring Boot to NodeJS and C# and .NET. I'm a big fan of ReactJS for frontend development, and I'm more than happy to experiment with the latest \"Javascript framework of the week\", so to speak. :wink:</p>\n            <p>Apart from that, I enjoy hiking when the weather is warm and skiing when it's not. Traveling and sightseeing are another source of enjoyment whenever I get the chance. Cooking is a recent hobby of mine, though it's still in the very early stages (read: beware anything I make - for now!).</p>\n            <p>Check out <a href=\"https://github.com/mbpolan\">my GitHub</a> to see what I've been up to. I also used to be active on <a href=\"https://sourceforge.net/u/kanadakid/profile/\">SourceForge</a> back in the day. Since then I've migrated most of my older, inactive projects over to GitHub instead. Even though I don't really plan on continuing said projects, they might still be useful as a reference for myself and others.</p>\n\n            <h2>Blog</h2>\n            <p>\n                <span>These are mostly random, off the cuff thoughts and ideas I figured I'd share.&nbsp;</span>\n                <span><a href=\"#blog\">More here!</a></span>\n            </p>\n            <BlogPostList limit={3} />\n        </PageContainer>\n    );\n};\n","import { ReactNode } from \"react\";\nimport { Prism } from \"react-syntax-highlighter\";\nimport { \n    materialLight, \n    materialDark, \n    prism as lightTheme,\n    materialDark as darkTheme,\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { useThemeMode } from \"../../hooks\";\n\nexport interface PrismRendererProps {\n    className?: string;\n    inline?: boolean;\n    children: ReactNode;\n}\n\nexport const PrismRenderer = ({ className, children, inline, ...props }: PrismRendererProps) => {\n    const themeMode = useThemeMode();\n    const match = /language-(\\w+)/.exec(className || '');\n\n    return !inline && match ? (\n        <Prism style={themeMode === 'dark' ? darkTheme : lightTheme} language={match[1]} PreTag=\"div\" children={String(children).replace(/\\n$/, '')} {...props} />\n    ) : (\n        <code className={className} {...props}>\n            {children}\n        </code>\n    )\n};\n","import { PageContainer } from '../layout';\nimport { BlogPostEntry } from '../../types';\nimport ReactMarkdown from 'react-markdown';\nimport styled from 'styled-components';\nimport gfm from 'remark-gfm';\nimport { PrismRenderer } from './PrismRenderer';\n\nconst Heading = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport interface PostViewProps {\n    entry: BlogPostEntry;\n}\n\nexport const PostView = ({\n    entry\n}: PostViewProps) => {\n    const formatDate = () => {\n        return new Date(entry.publishedDate).toLocaleDateString('en-US',\n        {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        });\n    }\n\n    return (\n        <PageContainer>\n            <Heading>\n                <h1>{entry.title}</h1>\n                <h4>{formatDate()}</h4>\n            </Heading>\n            <ReactMarkdown components={{\n                code: PrismRenderer\n            }} remarkPlugins={[gfm]}>{entry.content}</ReactMarkdown>\n        </PageContainer>\n    );\n};","import React, { useState } from \"react\";\nimport { Breadcrumb } from \"react-bootstrap\";\nimport { useParams } from \"react-router\";\nimport { PageContainer } from \"../../components/layout\";\nimport { PostView } from \"../../components/PostView\";\nimport { useContentEntry } from \"../../hooks\";\nimport { BlogPostEntry } from \"../../types\";\nimport { Error, Loading, NoData } from '../../components/displays';\n\nexport const Post = () => {\n    const { slug } = useParams<{ slug: string }>();\n    const [query] = useState<any>({\n        content_type: 'blogPost',\n        'fields.slug': slug,\n    });\n    const [data, error, loading] = useContentEntry<BlogPostEntry>(query);\n\n    return (\n        <PageContainer>\n            <Breadcrumb>\n                <Breadcrumb.Item href=\"#blog\">Blog</Breadcrumb.Item>\n                { !loading && data && <Breadcrumb.Item active>{data.title}</Breadcrumb.Item> }\n            </Breadcrumb>\n            \n            { error && <Error message={error} />}\n            { loading && <Loading message={'Fetching post content'} />}\n            { !loading && !data && <NoData message={'Could not find blog post'} />}\n            { !loading && data && <PostView entry={data} /> }\n        </PageContainer>\n    );\n};\n","import { useContent } from './index';\n\ntype UseContentEntryResult<T> = [T | undefined, string | undefined, boolean];\n\nexport const useContentEntry = <T>(query: any): UseContentEntryResult<T> => {\n  const [data, error, loading] = useContent<T>(query);\n  return [data[0], error, loading];\n};\n","import { DefaultTheme } from 'styled-components';\n\nexport const dark: DefaultTheme = {\n  body: {\n    backgroundColor: '#191B1C',\n    textColor: '#CECAC4',\n  },\n  a: {\n    textColor: '#519AEC',\n  },\n  breadcrumb: {\n    backgroundColor: '#333B3F',\n    active: {\n      textColor: '#CECAC4',\n    },\n  },\n  card: {\n    backgroundColor: '#333B3F',\n  },\n};\n","import { DefaultTheme } from 'styled-components';\n\nexport const light: DefaultTheme = {\n  body: {\n    backgroundColor: '#FFFFFF',\n    textColor: '#000000',\n  },\n  a: {\n    textColor: '#007BFF',\n  },\n  breadcrumb: {\n    backgroundColor: '#E9ECEF',\n    active: {\n      textColor: '',\n    },\n  },\n  card: {\n    backgroundColor: '#FFFFFF',\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n    body {\n        color: ${(props: any) => props.theme.body.textColor};\n        background-color: ${(props: any) => props.theme.body.backgroundColor}\n    }\n\n    a {\n        color: ${(props: any) => props.theme.a.textColor};\n    }\n\n    .breadcrumb {\n        background-color: ${(props: any) =>\n          props.theme.breadcrumb.backgroundColor};\n    }\n\n    .breadcrumb-item.active {\n        color: ${(props: any) => props.theme.breadcrumb.active.textColor};\n    }\n\n    .breadcrumb-item+.breadcrumb-item::before {\n        color: ${(props: any) => props.theme.breadcrumb.active.textColor};\n    }\n\n    .card {\n        background-color: ${(props: any) => props.theme.card.backgroundColor};\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { HashRouter, Route, Switch, useLocation } from 'react-router-dom';\nimport { Blog, Home, Post } from './scenes';\nimport { Header } from './components';\nimport { ContentfulProvider, ThemeMode, ThemeModeProvider } from './providers';\nimport qs from 'qs';\nimport { dark, light, GlobalStyles } from './themes';\nimport { ThemeProvider } from 'styled-components';\n\ninterface ContainerProps {\n  onChangeTheme: (mode: ThemeMode) => void;\n}\n\nconst Container = ({onChangeTheme}: ContainerProps) => {\n  const { search } = useLocation();\n  const [liveMode, setLiveMode] = useState<boolean>(true);\n\n  useEffect(() => {\n    const params = qs.parse(search, { ignoreQueryPrefix: true });\n    if (params.preview) {\n      setLiveMode(false);\n    }\n  }, [search]);\n\n  return (\n    <ContentfulProvider liveMode={liveMode}>\n      <Header onChangeTheme={onChangeTheme} />\n      <Switch>\n        <Route path=\"/blog/:slug\" component={Post} />\n        <Route path=\"/blog\" component={Blog} />\n        <Route component={Home} />\n      </Switch>\n    </ContentfulProvider>\n  );\n}\n\nconst App = () => {\n  const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [ themeMode, setThemeMode ] = useState<ThemeMode>(prefersDarkMode ? 'dark' : 'light');\n\n  return (\n    <ThemeModeProvider mode={themeMode}>\n      <ThemeProvider theme={themeMode === 'dark' ? dark : light}>\n        <GlobalStyles />\n\n        <HashRouter>\n          <Container onChangeTheme={setThemeMode}/>\n        </HashRouter>\n      </ThemeProvider>\n    </ThemeModeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}